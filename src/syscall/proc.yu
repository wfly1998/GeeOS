import proc.proc
import lib.io

public def sysExit(code: usize): isize {
  exit(code)
  0 as isize
}

public def sysSchedYield(): isize {
  yield()
  0
}

public def sysGetPid(): isize {
  (*(*getCurrentThread()).proc).pid as isize
}

public def sysFork(tf: TrapFrame var&): isize {
  let pid = (*(*getCurrentThread()).proc).pid
  let new_thread = getCurrentThread().fork(tf)
  let trap_cx: ContextContext var& = *(*new_thread).context.context_addr
  trap_cx.tf.x[10] = 0 as usize
  addThread(new_thread)
  pid as isize
}

public def sysExecve(path: u8*, argv: u8**, envp: u8**): isize {
  if execute(path, getCurrentTid()) {
    sleep()
    0 as isize
  }
  else {
    -1 as isize
  }
}
