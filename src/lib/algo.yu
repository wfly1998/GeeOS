inline def min(x: u32, y: u32): u32 {
  if x < y { x } else { y }
}

inline def max(x: u32, y: u32): u32 {
  if x > y { x } else { y }
}

inline def min(x: usize, y: usize): usize {
  if x < y { x } else { y }
}

inline def max(x: usize, y: usize): usize {
  if x > y { x } else { y }
}

inline def leading_zeros(num: usize): usize {
  // HD, Figure 5-6
  var i = num
  if i == 0 as usize {
    return 32 as usize
  }
  var n = 1 as usize
  if i >> 16 as usize == 0 as usize {
    n += 16 as usize
    i <<= 16 as usize
  }
  if i >> 24 as usize == 0 as usize {
    n +=  8 as usize
    i <<=  8 as usize
  }
  if i >> 28 as usize == 0 as usize {
    n +=  4 as usize
    i <<=  4 as usize
  }
  if i >> 30 as usize == 0 as usize {
    n +=  2 as usize
    i <<=  2 as usize
  }
  n -= i >> 31 as usize;
  n
}

inline def trailing_zeros(num: usize): usize {
  var i = num
  if i == 0 as usize {
    return 32 as usize
  }
  var n = 0 as usize
  if i << 16 as usize == 0 as usize {
    n += 16 as usize
    i >>= 16 as usize
  }
  if i << 24 as usize == 0 as usize {
    n +=  8 as usize
    i >>=  8 as usize
  }
  if i << 28 as usize == 0 as usize {
    n +=  4 as usize
    i >>=  4 as usize
  }
  if i << 30 as usize == 0 as usize {
    n +=  2 as usize
    i >>=  2 as usize
  }
  n += i >> 1 as usize;
  n
}

inline def next_power_of_two(num: usize): usize {
  if (num & (num - (1 as usize))) == (0 as usize) {
    return num
  }
  (1 as usize) << ((((sizeof usize) as usize) * (8 as usize)) - num.leading_zeros())
}

public struct RangeIter {
  cur: usize,
  end: usize,
}

inline def range(start: usize, end: usize): RangeIter {
  [RangeIter] {start, end}
}

inline def range(end: usize): RangeIter {
  range(0 as usize, end)
}

inline def next(this: RangeIter var&): usize {
  let ret = this.cur
  this.cur += 1 as usize
  ret
}

inline def last(this: RangeIter&): bool {
  this.cur >= this.end
}
